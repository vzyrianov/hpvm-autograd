import site
from pathlib import Path

import torch
from torch.utils.data.dataloader import DataLoader
from torch.utils.data.dataset import Subset

site.addsitedir(Path(__file__).parent.parent.absolute().as_posix())
from predtuner import PipedBinaryApp, config_pylogger
from predtuner.model_zoo import CIFAR, VGG16Cifar10

# Set up logger to put log file in /tmp
msg_logger = config_pylogger(output_dir="/tmp", verbose=True)

# TODO: fill in these 2 paths with path to binary file and path to json file, respectively:
binary_file, metadata_file = "", ""
# Create a `PipedBinaryApp` that communicates with HPVM bin.
# "TestHPVMApp" is an identifier of this app (used in logging, etc.) and can be anything.
# Other arguments: 
#   base_dir: which directory to run binary in (default: the dir the binary is in)
#   qos_relpath: the name of accuracy file generated by the binary.
#     Defaults to "final_accuracy". For HPVM apps this shouldn't change.
#   model_storage_folder: where to put saved P1/P2 models.
app = PipedBinaryApp("TestHPVMApp", binary_file, metadata_file)
# Tuning procedure is exactly the same as that for PyTorch DNN.
# Please refer to `./tune_vgg16_cifar10.py` for details.
tuner = app.get_tuner()
tuner.tune(100, 3.0, 3.0, True, 50, cost_model="cost_linear")
tuner.dump_configs("configs.json")
fig = tuner.plot_configs(show_qos_loss=True)
fig.savefig("configs.png", dpi=300)
app.dump_hpvm_configs(tuner.best_configs, "hpvm_confs.txt")


if __name__ == "__main__":
    main()